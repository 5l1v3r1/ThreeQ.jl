import DataStructures
import JLD
import MultiQubitCorrection
import ThreeQ
import PyPlot
import Random
import SparseArrays
longembedding = Array{Int64, 1}[[0], [5], [1], [4], [3], [131], [259], [387], [515], [516], [514], [642], [644], [641], [645], [640], [647], [655], [663], [659], [787], [915], [1043], [1044], [1040], [1045], [1037], [1035], [907], [911], [903], [898], [901], [897], [900], [896], [902], [910], [918], [926], [920], [1048], [1052], [1051], [1179], [1307], [1435], [1563], [1691], [1695], [1687], [1679], [1671], [1664], [1536], [1542], [1550], [1544], [1672], [1676], [1673], [1545], [1417], [1420], [1416], [1421], [1429], [1424], [1430], [1422], [1414], [1410], [1412], [1411], [1539], [1543], [1537], [1540], [1548], [1546], [1551], [1559], [1552], [1556], [1555], [1683], [1811], [1812], [1820], [1817], [1945], [1950], [1946], [1951], [1944], [1816], [1823], [1819], [1947], [1948], [1956], [1953], [1825], [1828], [1836], [1844], [1852], [1851], [1979], [1980], [1976], [1981], [1978], [1850], [1855], [1863], [1871], [1879], [1887], [1895], [1890], [2018], [2020], [2016], [1888], [1892], [1900], [1898], [2026], [2031], [2039], [2047], [2041], [2044], [2040], [2045], [2042], [1914], [1917], [1909], [1905], [1777], [1783], [1791], [1786], [1788], [1780], [1779], [1907], [2035], [2038], [2046], [2043], [1915], [1918], [1910], [1902], [1894], [1889], [2017], [2022], [2030], [2024], [2028], [2025], [1897], [1769], [1772], [1768], [1773], [1765], [1757], [1749], [1744], [1748], [1756], [1753], [1881], [1884], [1882], [2010], [2014], [2009], [2013], [2011], [2012], [2008], [1880], [1752], [1759], [1751], [1743], [1735], [1727], [1719], [1711], [1706], [1709], [1701], [1698], [1826], [1954], [1959], [1955], [1958], [1966], [1963], [1835], [1707], [1708], [1705], [1833], [1838], [1830], [1822], [1814], [1806], [1798], [1793], [1797], [1795], [1796], [1804], [1800], [1928], [1935], [1927], [1921], [1925], [1933], [1930], [1934], [1926], [1923], [1924], [1922], [1794], [1799], [1807], [1815], [1809], [1813], [1808], [1680], [1684], [1682], [1810], [1938], [1940], [1937], [1942], [1936], [1943], [1939], [1941], [1949], [1957], [1952], [1824], [1829], [1821], [1818], [1690], [1693], [1689], [1692], [1688], [1560], [1564], [1572], [1580], [1579], [1582], [1577], [1583], [1576], [1704], [1832], [1837], [1834], [1962], [1965], [1960], [1964], [1961], [1967], [1975], [1983], [1991], [1984], [1856], [1728], [1600], [1472], [1344], [1350], [1342], [1334], [1326], [1321], [1193], [1065], [1068], [1064], [1070], [1066], [1194], [1198], [1192], [1197], [1189], [1184], [1188], [1185], [1190], [1182], [1174], [1166], [1161], [1033], [1036], [1032], [1038], [1046], [1054], [1062], [1057], [929], [801], [673], [677], [675], [803], [804], [812], [809], [937], [943], [935], [931], [1059], [1187], [1315], [1443], [1447], [1439], [1431], [1427], [1299], [1171], [1173], [1181], [1177], [1305], [1308], [1316], [1312], [1317], [1325], [1320], [1448], [1454], [1449], [1453], [1445], [1442], [1570], [1575], [1568], [1440], [1444], [1436], [1433], [1437], [1432], [1304], [1176], [1180], [1178], [1050], [922], [794], [799], [807], [815], [823], [831], [839], [847], [843], [846], [854], [849], [721], [724], [732], [731], [733], [728], [600], [605], [597], [593], [465], [337], [341], [333], [325], [321], [193], [65], [70], [64], [69], [77], [72], [200], [205], [213], [221], [229], [225], [228], [236], [235], [107], [108], [106], [234], [362], [490], [618], [746], [874], [1002], [1130], [1132], [1131], [1003], [875], [747], [751], [743], [735], [727], [722], [594], [466], [471], [479], [475], [603], [604], [602], [730], [858], [862], [856], [860], [868], [864], [992], [1120], [1124], [1122], [994], [866], [738], [610], [482], [354], [358], [350], [342], [338], [210], [82], [84], [76], [74], [78], [73], [201], [204], [196], [195], [67], [68], [66], [194], [199], [191], [184], [188], [185], [313], [318], [315], [317], [312], [316], [324], [323], [451], [579], [582], [574], [566], [560], [564], [556], [553], [557], [552], [680], [808], [936], [941], [933], [925], [923], [927], [919], [912], [916], [924], [932], [940], [938], [810], [813], [821], [817], [689], [692], [690], [818], [946], [948], [944], [1072], [1076], [1084], [1083], [1211], [1339], [1467], [1595], [1723], [1724], [1720], [1848], [1853], [1845], [1841], [1969], [1974], [1982], [1977], [1849], [1721], [1593], [1465], [1468], [1464], [1592], [1598], [1590], [1586], [1591], [1599], [1607], [1615], [1623], [1631], [1639], [1634], [1762], [1764], [1760], [1767], [1775], [1770], [1642], [1514], [1517], [1512], [1518], [1515], [1387], [1389], [1385], [1513], [1516], [1524], [1520], [1527], [1519], [1511], [1504], [1509], [1507], [1635], [1763], [1891], [1893], [1885], [1877], [1872], [1876], [1868], [1865], [1993], [1996], [1988], [1987], [1989], [1986], [1990], [1985], [1857], [1860], [1858], [1861], [1869], [1864], [1736], [1741], [1737], [1740], [1732], [1729], [1601], [1606], [1603], [1475], [1347], [1348], [1345], [1349], [1341], [1333], [1328], [1200], [1205], [1203], [1075], [947], [819], [691], [563], [435], [307], [179], [51], [55], [48], [54], [49], [52], [50], [178], [306], [308], [300], [292], [290], [293], [291], [163], [35], [36], [34], [38], [30], [25], [29], [26], [28], [27], [155], [157], [153], [156], [164], [162], [165], [161], [33], [37], [32], [160], [288], [416], [422], [414], [406], [400], [528], [656], [784], [789], [781], [776], [904], [908], [905], [777], [780], [779], [651], [523], [524], [522], [394], [266], [268], [260], [257], [261], [269], [277], [285], [283], [286], [278], [272], [279], [271], [263], [256], [262], [270], [264], [392], [396], [388], [385], [389], [384], [390], [398], [395], [267], [139], [11], [14], [6], [2], [7], [15], [23], [19], [21], [16], [22], [17], [20], [18], [146], [274], [402], [404], [412], [410], [538], [666], [668], [665], [671], [679], [687], [695], [703], [697], [700], [698], [570], [442], [314], [186], [58], [60], [57], [63], [71], [79], [75], [203], [331], [459], [587], [591], [599], [607], [615], [623], [616], [621], [613], [611], [612], [608], [736], [740], [737], [609], [614], [606], [598], [590], [586], [714], [842], [845], [840], [968], [972], [969], [975], [970], [974], [982], [976], [981], [977], [980], [978], [983], [991], [999], [1007], [1015], [1023], [1019], [1022], [1017], [1020], [1016], [1021], [1018], [1146], [1150], [1147], [1149], [1141], [1133], [1125], [1117], [1112], [984], [988], [996], [993], [1121], [1127], [1135], [1129], [1257], [1262], [1270], [1278], [1274], [1276], [1273], [1145], [1148], [1144], [1151], [1143], [1138], [1140], [1139], [1267], [1269], [1261], [1258], [1386], [1391], [1399], [1407], [1402], [1406], [1401], [1404], [1400], [1405], [1397], [1395], [1523], [1651], [1653], [1661], [1657], [1785], [1913], [1919], [1912], [1916], [1908], [1904], [2032], [2036], [2033], [2037], [2034], [1906], [1911], [1903], [1896], [1901], [1899], [2027], [2029], [2021], [2019], [2023], [2015], [2007], [1999], [1992], [1997], [1994], [1866], [1738], [1610], [1482], [1354], [1226], [1228], [1227], [1355], [1356], [1352], [1357], [1365], [1360], [1232], [1236], [1233], [1361], [1489], [1492], [1488], [1494], [1502], [1510], [1506], [1508], [1500], [1498], [1626], [1754], [1758], [1750], [1746], [1874], [2002], [2005], [2001], [1873], [1745], [1617], [1621], [1613], [1605], [1597], [1594], [1722], [1725], [1717], [1713], [1585], [1589], [1581], [1578], [1450], [1452], [1460], [1456], [1463], [1455], [1451], [1323], [1324], [1322], [1327], [1335], [1343], [1351], [1359], [1367], [1375], [1383], [1376], [1382], [1374], [1366], [1358], [1353], [1225], [1097], [1100], [1108], [1104], [1109], [1107], [979], [851], [723], [595], [467], [339], [211], [83], [86], [80], [85], [93], [101], [99], [227], [355], [483], [484], [480], [485], [493], [501], [499], [627], [755], [883], [886], [878], [870], [865], [869], [877], [885], [880], [1008], [1014], [1011], [1013], [1010], [882], [754], [757], [765], [760], [764], [761], [767], [762], [890], [894], [891], [893], [888], [892], [889], [895], [887], [879], [871], [863], [855], [848], [720], [725], [717], [709], [706], [578], [583], [575], [568], [573], [569], [441], [445], [440], [446], [443], [571], [572], [580], [588], [596], [592], [464], [469], [477], [472], [344], [349], [357], [365], [373], [381], [377], [382], [374], [366], [361], [489], [617], [622], [630], [624], [628], [620], [619], [491], [363], [367], [359], [353], [481], [487], [495], [503], [511], [505], [633], [636], [634], [637], [629], [626], [498], [370], [372], [368], [496], [500], [492], [488], [360], [364], [356], [352], [224], [96], [100], [97], [102], [110], [104], [109], [105], [233], [237], [232], [238], [230], [222], [214], [206], [198], [190], [182], [176], [180], [172], [168], [174], [166], [158], [154], [282], [287], [295], [303], [311], [319], [327], [320], [192], [197], [189], [187], [59], [62], [56], [61], [53], [45], [42], [44], [43], [171], [299], [427], [555], [683], [811], [939], [1067], [1195], [1196], [1204], [1212], [1220], [1219], [1091], [1094], [1088], [1092], [1090], [1093], [1085], [1082], [954], [826], [828], [825], [953], [956], [955], [827], [699], [701], [696], [824], [829], [837], [832], [836], [833], [961], [965], [973], [971], [1099], [1101], [1096], [1224], [1229], [1237], [1235], [1363], [1364], [1362], [1490], [1618], [1620], [1616], [1622], [1614], [1609], [1481], [1484], [1476], [1473], [1477], [1469], [1461], [1458], [1330], [1202], [1074], [1078], [1086], [1080], [952], [957], [949], [945], [951], [959], [967], [960], [964], [962], [834], [838], [830], [822], [816], [688], [693], [685], [681], [684], [676], [674], [802], [930], [934], [942], [950], [958], [966], [963], [835], [707], [708], [705], [711], [719], [712], [584], [456], [461], [453], [449], [577], [581], [589], [585], [457], [329], [335], [328], [334], [326], [322], [450], [452], [444], [436], [434], [562], [565], [561], [567], [559], [551], [543], [535], [527], [519], [513], [517], [512], [518], [526], [534], [542], [536], [408], [280], [152], [24], [31], [39], [47], [40], [46], [41], [169], [297], [425], [431], [439], [447], [455], [463], [458], [460], [468], [476], [474], [346], [218], [220], [217], [89], [94], [90], [92], [91], [219], [347], [351], [343], [336], [208], [212], [209], [81], [87], [95], [88], [216], [223], [215], [207], [202], [330], [332], [340], [348], [345], [473], [601], [729], [857], [985], [1113], [1116], [1114], [986], [990], [998], [1006], [1001], [1005], [1000], [1004], [1012], [1009], [1137], [1265], [1393], [1396], [1392], [1264], [1136], [1142], [1134], [1128], [1256], [1260], [1268], [1266], [1394], [1398], [1390], [1384], [1388], [1380], [1379], [1251], [1123], [1126], [1118], [1110], [1106], [1111], [1119], [1115], [1243], [1371], [1372], [1369], [1497], [1501], [1499], [1627], [1755], [1883], [1886], [1878], [1870], [1867], [1995], [1998], [2006], [2000], [2004], [2003], [1875], [1747], [1619], [1491], [1493], [1485], [1480], [1608], [1612], [1604], [1596], [1588], [1584], [1712], [1716], [1714], [1842], [1970], [1973], [1968], [1972], [1971], [1843], [1715], [1587], [1459], [1331], [1332], [1329], [1457], [1462], [1470], [1478], [1486], [1483], [1611], [1739], [1742], [1734], [1726], [1718], [1710], [1702], [1694], [1686], [1678], [1670], [1665], [1668], [1667], [1669], [1666], [1538], [1541], [1549], [1557], [1554], [1426], [1428], [1425], [1297], [1169], [1041], [913], [917], [909], [906], [778], [650], [653], [648], [520], [525], [521], [649], [652], [660], [658], [530], [533], [529], [401], [273], [276], [284], [281], [409], [537], [541], [539], [667], [795], [796], [788], [785], [657], [661], [669], [664], [792], [797], [805], [800], [928], [1056], [1060], [1058], [1186], [1314], [1318], [1310], [1302], [1294], [1286], [1280], [1287], [1295], [1303], [1311], [1319], [1313], [1441], [1446], [1438], [1434], [1306], [1309], [1301], [1293], [1291], [1419], [1547], [1675], [1803], [1931], [1932], [1929], [1801], [1805], [1802], [1674], [1677], [1685], [1681], [1553], [1558], [1566], [1561], [1567], [1562], [1565], [1573], [1571], [1574], [1569], [1697], [1700], [1696], [1703], [1699], [1827], [1831], [1839], [1847], [1840], [1846], [1854], [1862], [1859], [1731], [1733], [1730], [1602], [1474], [1346], [1218], [1223], [1215], [1207], [1199], [1191], [1183], [1175], [1167], [1159], [1152], [1158], [1155], [1283], [1285], [1282], [1154], [1156], [1153], [1157], [1165], [1162], [1290], [1418], [1423], [1415], [1408], [1413], [1409], [1281], [1284], [1292], [1288], [1160], [1164], [1172], [1168], [1296], [1300], [1298], [1170], [1042], [914], [786], [791], [783], [775], [768], [773], [769], [772], [770], [774], [782], [790], [798], [793], [921], [1049], [1053], [1061], [1069], [1077], [1073], [1201], [1206], [1214], [1210], [1338], [1466], [1471], [1479], [1487], [1495], [1503], [1496], [1368], [1240], [1244], [1242], [1370], [1373], [1381], [1378], [1250], [1252], [1248], [1253], [1245], [1241], [1246], [1254], [1249], [1377], [1505], [1633], [1761], [1766], [1774], [1771], [1643], [1646], [1640], [1647], [1641], [1645], [1637], [1629], [1624], [1628], [1625], [1630], [1638], [1632], [1636], [1644], [1652], [1660], [1658], [1530], [1532], [1529], [1535], [1528], [1534], [1526], [1522], [1650], [1778], [1782], [1790], [1787], [1659], [1662], [1654], [1648], [1776], [1781], [1789], [1784], [1656], [1663], [1655], [1649], [1521], [1525], [1533], [1531], [1403], [1275], [1277], [1272], [1279], [1271], [1263], [1255], [1247], [1239], [1234], [1238], [1230], [1222], [1216], [1221], [1213], [1208], [1336], [1340], [1337], [1209], [1081], [1087], [1079], [1071], [1063], [1055], [1047], [1039], [1031], [1025], [1030], [1024], [1029], [1026], [1028], [1027], [899], [771], [643], [646], [654], [662], [670], [678], [672], [544], [549], [546], [418], [423], [415], [407], [399], [391], [386], [258], [130], [134], [142], [150], [144], [148], [145], [149], [141], [138], [143], [135], [128], [133], [129], [132], [140], [136], [8], [13], [10], [12], [9], [137], [265], [393], [397], [405], [413], [421], [429], [426], [298], [170], [173], [181], [177], [183], [175], [167], [159], [151], [147], [275], [403], [531], [532], [540], [548], [545], [417], [289], [294], [302], [296], [301], [309], [304], [310], [305], [433], [437], [432], [438], [430], [424], [428], [420], [419], [547], [550], [558], [554], [682], [686], [694], [702], [710], [704], [576], [448], [454], [462], [470], [478], [486], [494], [502], [510], [504], [509], [506], [508], [507], [379], [251], [123], [127], [120], [125], [122], [124], [121], [126], [118], [113], [116], [115], [117], [112], [240], [246], [254], [249], [255], [247], [239], [231], [226], [98], [103], [111], [119], [114], [242], [245], [253], [250], [252], [248], [376], [380], [378], [383], [375], [371], [243], [244], [241], [369], [497], [625], [631], [639], [632], [638], [635], [763], [766], [758], [750], [742], [734], [726], [718], [715], [716], [713], [841], [844], [852], [850], [853], [861], [859], [987], [989], [997], [995], [867], [739], [741], [749], [744], [872], [876], [873], [745], [748], [756], [752], [759], [753], [881], [884]]
#=
const longembedding = Array{Int64,1}
=#
#longembedding = Array{Int64, 1}[[0], [5], [1], [6], [2], [7], [3], [4], [12], [8], [13], [9], [14], [10], [15], [11]]
#longembedding = Array{Int64, 1}[[0], [5], [1], [6], [2], [7], [3], [4], [12], [8], [13], [9], [14], [10], [15], [11], [43 - 32 + 8 * 16], [44 - 32 + 8 * 16], [40 - 32 + 8 * 16], [45 - 32 + 8 * 16], [41 - 32 + 8 * 16], [46 - 32 + 8 * 16], [42 - 32 + 8 * 16], [47 - 32 + 8 * 16], [135], [128], [134], [129], [133], [130], [132], [131]]
#longembedding = Array{Int64, 1}[[0], [5], [1], [6], [2], [7], [3], [4], [12], [8], [13], [9], [14], [10], [15], [11], [43], [44], [40], [45], [41], [46], [42], [47]]
#truekb = 0


#solve 1d groundwater equation assuming the left and right boundary have 0 head, with a spacing of 1 between nodes
function solver(ks::Array{Float64, 1}, rs::Array{Float64, 1})
	I = Array{Int}(undef, 3 * (length(ks) - 1) + 2)
	J = Array{Int}(undef, 3 * (length(ks) - 1) + 2)
	V = Array{Float64}(undef, 3 * (length(ks) - 1) + 2)
	b = Array{Float64}(undef, length(ks) + 1)
	I[1] = 1; J[1] = 1; V[1] = 1.0; b[1] = length(ks)
	I[2] = length(ks) + 1; J[2] = length(ks) + 1; V[2] = 1.0; b[2] = 0.0
	push!(I, length(ks) + 1); push!(J, length(ks) + 1); push!(V, 1.); b[end] = 0.0
	l = 3
	dx = 1
	for i = 2:length(ks)
		b[i] = -rs[i - 1]
		I[l] = i
		J[l] = i - 1
		V[l] = ks[i - 1] / dx^2
		I[l + 1] = i
		J[l + 1] = i + 1
		V[l + 1] = ks[i] / dx^2
		I[l + 2] = i
		J[l + 2] = i
		V[l + 2] = -(ks[i - 1] + ks[i]) / dx^2
		l += 3
	end
	A = SparseArrays.sparse(I, J, V)
	return A \ b
end

function b2f(kb, klow, khigh)
	local ks = Array{Float64}(undef, length(kb))
	for i = 1:length(kb)
		if kb[i] == 1
			ks[i] = khigh
		else
			ks[i] = klow
		end
	end
	return ks
end

function solver(kb, rs, klow, khigh)
	ks = b2f(kb, klow, khigh)
	return solver(ks, rs)
end

function sample(h, klow, khigh, rs; num_reads=100, solver=ThreeQ.DWQMI.defaultsolver, kwargs...)
	Q = zeros(length(h) - 1, length(h) - 1)
    for i = 2:length(h) - 1
		constterm = klow * h[i + 1] - klow * h[i] - klow * h[i] + klow * h[i - 1] + rs[i - 1]
		qicoeff = (khigh - klow) * (h[i + 1] - h[i])
		qim1coeff = (khigh - klow) * (h[i - 1] - h[i])
		Q[i, i] += qicoeff ^ 2 + 2 * constterm * qicoeff
		Q[i - 1, i - 1] += qim1coeff ^ 2 + 2 * constterm * qim1coeff
		Q[i, i - 1] += qicoeff * qim1coeff
		Q[i - 1, i] += qicoeff * qim1coeff
    end
	embeddings = longembedding[1:size(Q, 1)]
	adjacency = ThreeQ.DWQMI.getadjacency(solver)
	kbs = Array{Int}(undef, length(h) - 1, num_reads)
	function finishsolve_helper(m, embans, emb)
		answer = 0.5 * (ThreeQ.DWQMI.unembedanswer(embans["solutions"], emb)' .+ 1)#convert from ising to qubo
		i = 1
		for j = 1:size(answer, 2)
			occurrences = embans["num_occurrences"][j]
			for l = 1:occurrences
				kbs[:, i] = answer[:, j]
				i += 1
			end
		end
	end
    ThreeQ.solvesapi!(Q; auto_scale=true, solver=solver, num_reads=num_reads, embeddings=embeddings, finishsolve_helper=finishsolve_helper, kwargs...)
	return kbs, Q
end

function sample(h, klow, khigh, rs, myloglikelihood; burnin=100, numsteps=100, num_reads=100, kwargs...)
	kbs = sample(h, klow, khigh, rs; num_reads=num_reads, kwargs...)
	bigkbs = Array{Int}(undef, length(h) - 1, num_reads * numsteps)
	i = 1
	for j = 1:size(kbs, 2)
		bigkbs[:, i:i + numsteps - 1], _ = ThreeQ.sample(kbs[:, j], burnin, numsteps, myloglikelihood)
		i += numsteps
    end
    return bigkbs
end

function makellhood(truekb, sigmaobs, klow, khigh)
	truers = zeros(length(truekb) - 1)
	trueh = solver(truekb, truers, klow, khigh)
	obsh = trueh + sigmaobs * randn(length(trueh))
	function myloglikelihood(kb)
		h = solver(kb, truers, klow, khigh)
		return -sum((h - obsh).^2) / (2 * sigmaobs^2)
	end
	return myloglikelihood, truekb, truers, obsh
end

#dwsolver = ThreeQ.DWQMI.defaultsolver
dwsolver = ThreeQ.DWQMI.getdw2q(mytoken)
adj = ThreeQ.DWQMI.getadjacency(dwsolver)
klow = 1.0
sigmaobs = 0.0
for i = 1:length(longembedding) - 1
	if !((longembedding[i][1], longembedding[i + 1][1]) in adj)
		error("bad: $((longembedding[i][1], longembedding[i + 1][1]))")
	end
end

#for khigh in 10 .^ range(1, 5; length=5)
results = zeros(2, 3)
for (j, khigh) in enumerate([2, 10, 100])
	Random.seed!(0)
	mqc_correct = 0
	dw_correct = 0
	sample_size = 10^2
	@time for i = 1:sample_size
		truekb = rand([0, 1], length(longembedding))
		_, truekb, truers, obsh = makellhood(truekb, sigmaobs, klow, khigh)
		kbs, qubo = sample(obsh, klow, khigh, truers; num_reads=10^3, solver=dwsolver, token=mytoken)
		kbs_ising = 2 * kbs .- 1
		hJ = ThreeQ.DWQMI.qubo2ising(qubo)
		kb_mqc = MultiQubitCorrection.reduce(kbs_ising, hJ)
		if (kb_mqc .+ 1) / 2 == truekb
			mqc_correct += 1
		end
		dw_correct += ifelse(sum(map(i->kbs[:, i] == truekb, 1:size(kbs, 2))) > 0, 1, 0)
	end
	@show khigh, mqc_correct / sample_size, dw_correct / sample_size
	results[1, j] = mqc_correct / sample_size
	results[2, j] = dw_correct / sample_size
end
